{
  "name": "building the right things with mobius",
  "tagline": "mobius provides continuous feedback on whether you are building the right things",
  "body": "[![Gem Version](https://badge.fury.io/rb/mobiusloop@2x.svg)](https://badge.fury.io/rb/mobiusloop) [![CircleCI](https://circleci.com/gh/ryanshriver/mobiusloop-ruby.svg?style=shield&circle-token=eb1000f0a1ead99dfccea820d3c368b097556c03)](https://circleci.com/gh/ryanshriver/mobiusloop-ruby)\r\n\r\n# building the right things with mobius\r\n\r\nMost product development tools focus on **building things right** meaning with a defined scope, on time, on budget and with high quality. `mobius` is different. It uses a simple language to define the desired business and product goals, such as Increase Customer Conversion or Improve App Responsiveness. Then `mobius` uses automation to measure and report progress\r\ntowards your goals daily, weekly or whenever you want.\r\n\r\nWith `mobius` teams get realtime feedback on whether their new features are delivering the expected value. Leaders get\r\nclear visibility on whether their investments are delivering the desired return. Everyone gets feedback on whether they are\r\n**building the right things**.\r\n\r\nUse `mobius` with our method [Mobius](http://mobiusloop.com) and other methods like\r\n[Objectives and Key Results (OKR's)](https://www.amazon.com/Radical-Focus-Achieving-Important-Objectives-ebook/dp/B01BFKJA0Y)\r\nto define and measure the value of your product or service.\r\n\r\n\r\n## how it works\r\n\r\nToday many teams write automated feature tests using open source tools like [Cucumber](http://cucumber.io). They write these\r\ntests in a simple, readable format using the [Gherkin](https://cucumber.io/docs/reference) language. Whenever these tests are run, teams get realtime feedback\r\non the quality of their product.\r\n\r\n`mobius` builds up this concept to apply automation towards product goals and business objectives. Instead of tests that report on\r\nproduct quality, `mobius` reports on progress towards desired goals.\r\n\r\nUnder the covers `mobius` is built on the popular open source testing tool [Cucumber](http://cucumber.io). It consists of three main parts:\r\n 1. `.goal` files\r\n 1. step definitions\r\n 1. custom `Scale`'s\r\n\r\n\r\n#### 1. `.goal` files\r\nTo start, leaders and teams agree on their objectives and the measurable outcomes that define success.\r\nFrameworks like [Objectives and Key Results (OKR's)](https://www.amazon.com/Radical-Focus-Achieving-Important-Objectives-ebook/dp/B01BFKJA0Y)\r\nand [Mobius](http://mobiusloop.com) encourage qualitative statements (problems or objectives) together with quantitative\r\nmeasures of success (outcomes or key results).\r\n\r\n\r\n```ruby\r\nObjective: Reach a million paying customers by Q3 2016!\r\n\r\n  Key Result: Increase Journal Readership\r\n    Given a baseline of 500,000 readers on Oct 1, 2015\r\n    And a target of 1,000,000 readers by Oct 1, 2016\r\n    Then measure progress with \"Total Readers Scale\"\r\n```\r\nHere's another one:\r\n\r\n```ruby\r\nProblem: Slow app response times are causing us to lose customers\r\n\r\n  Outcome: Improve App Responsiveness\r\n    Given a baseline of 4.5 seconds average response time on May 1, 2016\r\n    And a target of 1.5 seconds average response time by Jun 30, 2016\r\n    Then measure progress with \"Peak User Performance Scale\"\r\n```\r\nThe syntax is based [Gherkin](https://cucumber.io/docs/reference), the language used to write Cucumber acceptance tests.\r\n`mobius` introduces a four new keywords to Gherkin: **Objective**, **Problem**, **Outcome** and **Key Result**.\r\n\r\nEach `.goal` file contains **one** Objective or Problem and **one or more** Outcomes or Key Results.\r\n\r\nWhen the `.goal` files are run with `mobius`, they report progress towards your targets like this:\r\n\r\n```ruby\r\nObjective: Top a million paying customers by Q3 2016!\r\n\r\n  Key Result: Increase Journal Readership to 1,000,000\r\n    Given a baseline of 500000 readers on \"Oct 1, 2015\"\r\n    And a target of 1000000 readers by \"Oct 1, 2016\"\r\n    When we measure progress with \"Total Readers Scale\"\r\n      Success! found 820,000 readers in 1.2 seconds!\r\n    Then measure progress with \"Total Readers Scale\"\r\n      Hooray! You are on track!\r\n      64% progress to target using 61% of the time (222 days)\r\n      36% remaining to target in 143 days\r\n````\r\n\r\nProgress is reported on the screen an optionally saved to a file.\r\n\r\nWith `mobius` teams can measure progress towards their goals daily, weekly, monthly or whatever cadence makes sense.\r\nIntegrating `mobius` into your continuous delivery pipeline helps measure the impacts of each new release on your outcomes or key results.\r\n\r\n\r\n#### 2. step definitions\r\nUnder the covers, `mobius` is built on a forked copy of [cucumber-ruby](https://github.com/cucumber/cucumber-ruby).\r\nIt uses Gherkin to parse the `.goal` files and call Cucumber [step definitions](https://github.com/cucumber/cucumber/wiki/Step-Definitions).\r\n`mobius` ships with one step definition [mobius_steps.rb](lib/mobiusloop/mobius_steps.rb) that can be modified or extended.\r\n\r\nInside `mobius_steps.rb`, the lines beginning with `Given` and `And` save the baseline and target values, respectively.\r\nThe line beginning with `When` creates an `Outcome` with a custom `Scale`, sets the baselines and targets, then calls\r\nthe `measure` method to perform the measurement. The line beginning with `Then` reports the progress towards targets.\r\n\r\nThis `Given, When, Then` syntax is identical to Gherkin, easing the learning curve for teams already using Cucumber.\r\nTeams can choose to use the built-in `mobius_steps.rb` or create their own step definitions.\r\n\r\n\r\n#### 3. custom `Scale`'s\r\n\r\nAt creation time, each outcome (or key result) is associated with a custom `Scale` of measure.\r\nScale's are the code that collects your data in your environment to report progress.\r\n`mobius` ships with a few example scales, however teams are encouraged to create custom scales to meet their needs.\r\n\r\nTo create a Scale, create a new Ruby class that extends `Scale` and then implement the `measure` method. Next, update the `.goal`\r\n file to reference your new `Scale` class. When `mobius` parses this line:\r\n\r\n```we measure progress with \"Total Readers Scale\"```\r\n\r\nit creates a new instance of the Ruby class `TotalReadersScale` and calls the `measure` method, which returns a new `Measure`.\r\n\r\nHere's an example:\r\n\r\n```Ruby\r\nrequire 'mobiusloop/scale'\r\nrequire 'mobiusloop/measure'\r\n\r\nclass TotalReadersScale < Scale\r\n\r\n  def measure\r\n    total = collect_total_readers\r\n    Measure.new(total)\r\n  end\r\nend\r\n````\r\n\r\nIn this example you would implement the method `collect_total_readers` with your custom logic.\r\n\r\n\r\n## getting started\r\n\r\nAdding `mobius` to your product is relatively easy, but requires some command-line chops and about 20 minutes of your time.\r\nIf the following section looks like Greek, then as nicely as possible ask a developer on your team for help. Come bearing gifts!\r\n\r\n**Note:** Currently only Ruby on Linux and OSX are tested platforms. Windows will be added in the future.\r\n\r\nIf [Ruby](https://www.ruby-lang.org/en/), [gem](https://rubygems.org) and [bundle](http://bundler.io) are not installed, install them first.\r\n\r\nThen install `mobius` with this command:\r\n\r\n    $ gem install mobiusloop\r\n\r\nOnce installed, create a symbolic link for the `mobius` command. First locate your ruby executable path:\r\n\r\n    $ gem env\r\n\r\nLook for the value of `EXECUTABLE DIRECTORY`, something like `/usr/local/Cellar/ruby/2.2.3/bin/`.\r\nThen create a symbolic link:\r\n\r\n    $ ln -s /path/to/executable/directory/mobius /usr/local/bin/mobius\r\n\r\n**TODO:** Simplify to find a way to create symbolic link as part of gem install\r\n\r\n\r\n## adding mobius to your app\r\n\r\nTo create and run your own goals, let's start with a working example and modify it.\r\n\r\nChange to the root directory of your app and run `mobius`:\r\n\r\n    $ cd product_root_directory\r\n    $ mobius\r\n\r\nYou get feedback that `mobius` is not initialized. So let's do that:\r\n\r\n    $ mobius --init\r\n\r\n`mobius` creates a `goals/` directory and put some files in there. Let's run it again:\r\n\r\n    $ mobius\r\n\r\nYou got feedback that `mobius` is running for your product!\r\n\r\nIf you get an error instead, attempt to debug the issue and [let us know](https://github.com/ryanshriver/mobiusloop-ruby/issues)\r\nso we can fix it.\r\n\r\nNow let's customize `mobius` for your needs.\r\n\r\n\r\n# create your first goal\r\n\r\nMobius ships with a working goal to get you started.\r\n\r\nOpen `goals/increase_readers.goal` in your favorite text editor,\r\nchange the *baseline* or *target value*. Save and run `mobius` again. Notice changes in the progress?\r\n\r\nChange the *baseline* or *target dates* and run `mobius` again. See more changes? Getting the hang of it?\r\n\r\nAs you experiment you may notice the progress being displayed in green, yellow or red font color.\r\nIn addition to the quantitative progress, `mobius` reports on whether you are *on track*. All this is configurable\r\nbut more on that later.\r\n\r\n\r\n#### step 1: create .goal file\r\n\r\nLet's pretend you have a product outcome to **improve response time** for your product from 5 seconds to 1 second.\r\nStart by copying our working example:\r\n\r\n    $ cp goals/increase_readers.goal goals/improve_experience.goal\r\n\r\n\r\n#### step 2: create objectives and outcomes\r\n\r\nOpen `improve_experience.goal` in your text editor and make some changes:\r\n\r\n 1. Update `Objective:` to reflect our new goal. How about `Improve our digital customer experience this year`\r\n 1. Let's only start with one `Outcome`, so delete from `Outcome: Increase Published Articles by 25%` to the end of the file\r\n 1. Now update your `Outcome:` keeping it short and sweet. How about `Improve Response Time`\r\n\r\nWhen done it should look like this:\r\n\r\n```\r\nObjective: Improve our digital customer experience this year\r\n\r\n Outcome: Improve Response Time\r\n    Given a baseline of 500000 \"readers\" on \"Oct 1, 2016\"\r\n    And a target of 1000000 \"readers\" by \"Oct 1, 2017\"\r\n    Then measure progress with \"Total Readers Scale\"\r\n```\r\n\r\nSave your new goal and run `mobuis` again. Notice that `mobius` runs all the `.goal` files in the `goals/` folder by default.\r\nWe can just run our new one with this command:\r\n\r\n    $ mobius goals/improve_experience.goal\r\n\r\nSince we don't need the example anymore, let's remove it:\r\n\r\n    $ rm goals/increase_readers.goal\r\n\r\n\r\n#### step 3: define baselines and targets\r\n\r\nLet's pretend as of October 1, 2016 your app's home page takes 5 seconds to load. That's your baseline.\r\nSince your product owner has requested *sub-second response time*, that's your target.\r\n\r\nOpen `improve_experience.goal` in your text editor and make some changes:\r\n\r\n1. In the row starting with `Given`, change `50000` to `5` and `readers` to `seconds`\r\n1. In the row starting with `And`, change `1000000` to `1` and `readers` to `second`\r\n\r\nWhen done it should look like this:\r\n\r\n```\r\nObjective: Improve our digital customer experience this year\r\n\r\n Outcome: Improve Response Time\r\n    Given a baseline of 5 \"seconds\" on \"Oct 1, 2016\"\r\n    And a target of 1 \"second\" by \"Oct 1, 2017\"\r\n    Then measure progress with \"Total Readers Scale\"\r\n```\r\n\r\nNow save the file and run `mobius` again.\r\n\r\nThis works, but we have *820,000 seconds!* That's not right, so let's fix it.\r\n\r\n\r\n#### step 4: define scales\r\n\r\nOpen `improve_experience.goal` in your text editor and make some changes:\r\n\r\n1. In the row starting with `When`, change \"Total Readers Scale\" to \"Page Response Scale\"\r\n\r\nWhen done it should look like this:\r\n\r\n```\r\nObjective: Improve our digital customer experience this year\r\n\r\n Outcome: Improve Response Time\r\n    Given a baseline of 5 \"seconds\" on \"Oct 1, 2016\"\r\n    And a target of 1 \"second\" by \"Oct 1, 2017\"\r\n    Then measure progress with \"Page Response Scale\"\r\n```\r\n\r\nNow save the file and run `mobius` again.\r\n\r\nWow, much better! The *Page Response Scale* generated a request to [google.com](http://google.com) and compared the\r\nresponse time to your target of 1 second. It reported what percentage progress you had made to your\r\ntarget in your scheduled time. The color text indicates whether you are on track or not.\r\n\r\nHopefully by now you know how to edit a `.goal` file with confidence and run them to report\r\nprogress towards your objectives and outcomes. But unless all of your goals are related to page\r\nresponse time, you'll need to customize `mobius` to meet your needs.\r\n\r\n\r\n# mobius development guide\r\n\r\nCustomizing `mobius` for your product is a 3 step process:\r\n\r\n\r\n#### step 1: create a new .goal file in the goals/ directory\r\n\r\nWe recommend copying a working example and modifying to meet your needs. For the .goal filename, we recommend naming it\r\nafter your objective or problem statement. Something like this:\r\n\r\n    $ cp goals/increase_readers.goal goals/improve_quality.goal\r\n\r\nAdd your objectives, outcomes and the correct target and baseline values. When done, do a *dry run*:\r\n\r\n    $ mobius goals/improve_quality.goal --dry-run\r\n\r\nDry runs valid the `.goal` syntax is correct without actually running the scales that measure progress. Ensure your\r\nsyntax is valid before moving on.\r\n\r\n\r\n#### step 3: create a new Scale\r\n\r\nCurrently the only way to create a custom scale is to write some Ruby code. Specifically you must create a new Ruby class\r\nthat extends the `Scale` class and implements a `measure` method. For example, if your .`goal` file contains\r\n\"My Custom Scale\", the Ruby class would be:\r\n\r\n```Ruby\r\nrequire 'mobiusloop/scale'\r\nrequire 'mobiusloop/measure'\r\n\r\nclass MyCustomScale < Scale\r\n\r\n  def measure\r\n    total = fetch_your_total\r\n    Measure.new(total)\r\n  end\r\n\r\nend\r\n```\r\nThis class is saved to `goals/step_definitions/my_custom.scale.rb`. The line `total = fetch_your_total` would be replaced\r\nwith your custom logic. The last line `Measure.new(total)` returns a new measure, as required by all Scales.\r\n\r\nWe recommend writing unit tests around any custom scales you create to ensure they work as expected before integrating with `mobius`.\r\n\r\nTODO: Add methods to write custom Scales without writing Ruby. Pre-ship a few common ones.\r\n\r\n\r\n#### step 3: configure mobius\r\n\r\nCertain features of `mobius` are configurable in the `goals/support/config.yml` file. Specifically:\r\n\r\n```YAML\r\nmeasures:\r\n  save: false\r\n```\r\nSetting this to `true` records each `mobius` run's progress in a small `.json` file inside the `goals/measures` directory.\r\nThe name of the file is the timestamp of when it was run. If you would like to report on trending\r\nprogress of your objectives and outcomes over time, you incorporate these values.\r\n\r\nTODO: Identify an relatively easy method to use these to report trending\r\n\r\n\r\n```YAML\r\nprogress:\r\n  good_percent: 10\r\n  bad_percent: 30\r\n```\r\n`mobius` reports progress in green, yellow or red font color to indicate whether you are on track to hit your target by the\r\ntarget date. This is configurable with the values `good_percent` and `bad_percent`.\r\n\r\nIt is easiest to explain this with a picture:\r\n\r\n![mobius progress graph](/docs/mobius_progress.jpg)\r\n\r\nYou can adjust `good_percent` and `bad_percent` to adjust how you report progress.\r\n\r\n\r\n## advanced features\r\n\r\nBecause `mobius` is an extension of [Cucumber](http://cucumber.io), there are many features in Cucumber that also\r\nexist in `mobius`. A few examples:\r\n\r\n**Tags** - Use tags to create logical groups of Objectives, Problems, Outcomes or Key Results that you want run together.\r\nFor example, add `@performance` to the line immediately above a definition:\r\n\r\n```ruby\r\n@performance\r\nProblem: Slow app response times are causing us to lose customers\r\n\r\n```\r\nThen run with this:\r\n\r\n    $ mobius --tags @performance\r\n\r\nOnly those definitions with the @performance tag are run.\r\n\r\n\r\n## tests\r\n\r\n`mobius` is built using a test-first approach. We're proud of our tests, but we're always looking to add more.\r\nIf you downloaded the source code to `/workspace/mobiusloop-ruby`, you can run the tests using this command from the source code folder:\r\n\r\n    $ rspec spec/mobiusloop/\r\n\r\n\r\n## further reading\r\n\r\nI have personally found [The Cucumber Book](https://pragprog.com/book/hwcuc/the-cucumber-book) a great reference and\r\n worthy of purchase if you would like to get the most of out `mobius`.\r\n [Cucumber.io](http://cucumber.io) is also a reference I use.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}